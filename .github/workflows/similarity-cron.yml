name: Similarity Precomputation Cron

on:
  schedule:
    # T√§glich um 2 Uhr nachts (UTC)
    - cron: '0 2 * * *'
    # W√∂chentlich am Sonntag um 3 Uhr (vollst√§ndige Neuberechnung)
    - cron: '0 3 * * 0'

  # Erm√∂glicht manuelles Triggern
  workflow_dispatch:

jobs:
  similarity-precomputation:
    runs-on: ubuntu-latest

    steps:
      - name: Call Cloudflare Pages Webhook
        id: webhook
        run: |
          echo "üîÑ Triggering similarity precomputation on Cloudflare Pages..."

          # Rufe den Webhook-Endpoint auf deiner Cloudflare Pages App auf
          response=$(curl -w "%{http_code}" -s -X POST \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Cron/1.0" \
            -d '{"source": "github-actions", "schedule": "daily", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' \
            ${{ secrets.CLOUDFLARE_PAGES_URL }}/api/admin/similarity-cron)

          # Extrahiere HTTP-Status-Code
          http_code="${response: -3}"
          response_body="${response%???}"

          echo "HTTP Status: $http_code"
          echo "Response: $response_body"

          # Pr√ºfe Erfolg
          if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ Similarity precomputation triggered successfully"
          else
            echo "‚ùå Similarity precomputation failed with HTTP $http_code"
            exit 1
          fi

          # Speichere Response f√ºr n√§chsten Step
          echo "response_body=$response_body" >> $GITHUB_OUTPUT

      - name: Parse Results
        run: |
          echo "üìä Parsing similarity precomputation results..."

          # Extrahiere wichtige Informationen aus der Response
          response="${{ steps.webhook.outputs.response_body }}"

          # Einfache JSON-Parsing (falls jq nicht verf√ºgbar)
          if echo "$response" | grep -q '"success":true'; then
            echo "‚úÖ Precomputation completed successfully"
            
            # Extrahiere Zahlen (vereinfacht)
            processed=$(echo "$response" | grep -o '"processed":[0-9]*' | cut -d':' -f2 || echo "0")
            errors=$(echo "$response" | grep -o '"errors":[0-9]*' | cut -d':' -f2 || echo "0")
            
            echo "üìà Processed wishes: $processed"
            echo "‚ùå Errors: $errors"
            
            # Setze GitHub-Status
            if [ "$errors" -gt 0 ]; then
              echo "‚ö†Ô∏è Completed with $errors errors"
            else
              echo "üéâ Completed successfully without errors"
            fi
          else
            echo "‚ùå Precomputation failed"
            echo "Response: $response"
            exit 1
          fi

  health-check:
    runs-on: ubuntu-latest
    needs: similarity-precomputation
    if: always() # L√§uft auch wenn der vorherige Job fehlschl√§gt

    steps:
      - name: Check Similarity System Health
        run: |
          echo "üîç Checking similarity system health..."

          # Health-Check
          response=$(curl -w "%{http_code}" -s -X GET \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "User-Agent: GitHub-Actions-HealthCheck/1.0" \
            ${{ secrets.CLOUDFLARE_PAGES_URL }}/api/admin/similarity-cron)

          # Extrahiere HTTP-Status-Code
          http_code="${response: -3}"
          response_body="${response%???}"

          echo "HTTP Status: $http_code"
          echo "Health Response: $response_body"

          # Pr√ºfe ob Response erfolgreich ist
          if [ "$http_code" -eq 200 ] && echo "$response_body" | grep -q '"status":"healthy"'; then
            echo "‚úÖ Similarity system is healthy"
            
            # Extrahiere Health-Informationen
            outdated=$(echo "$response_body" | grep -o '"outdatedWishes":[0-9]*' | cut -d':' -f2 || echo "unknown")
            echo "üìä Outdated wishes: $outdated"
            
          else
            echo "‚ùå Similarity system health check failed"
            echo "This might indicate issues with the similarity service"
            # Nicht als Fehler behandeln, nur warnen
          fi

  notify-status:
    runs-on: ubuntu-latest
    needs: [similarity-precomputation, health-check]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "üìã Similarity Cron Job Summary"
          echo "================================"
          echo "Timestamp: $(date -u)"
          echo "Precomputation Status: ${{ needs.similarity-precomputation.result }}"
          echo "Health Check Status: ${{ needs.health-check.result }}"

          if [ "${{ needs.similarity-precomputation.result }}" = "success" ]; then
            echo "üéâ Cron job completed successfully!"
          else
            echo "‚ùå Cron job failed - check logs above"
          fi
